package wasmcloud:couchbase@0.1.0-draft;

/// Perform transactions that contain multiple operations, comprising:
/// - Key-Value operations
/// - SQL++ queries
///
/// Reference: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#retrieving
interface transactions {
  use types.{
    document-id, request-span, document, subdocument-path, document-error, retry-strategy, mutation-metadata,
    query-scan-consistency, query-profile-mode, collection
  };
  use document.{document-get-result};
  use sqlpp.{sqlpp-value, sqlpp-query-status, sqlpp-query-metrics, sqlpp-query-warning};

  /// A token representing a transaction (pseudo resource)
  ///
  /// NOTE: In future versions with more widespred WIT Resource support,
  /// this transaction will turn into a transaction resource.
  type tx-token = string;

  /// Errors that occur when trying to create a transaction
  variant create-tx-error {
    /// A completely unexpected error
    unexpected(string),
  }

  /// Create a transaction
  create-tx: func() -> result<tx-token, create-tx-error>;

  /// Errors that occur while performing an operation inside a given transaction
  variant tx-error {
    /// Transaction has expired
    expired,
    /// Transaction has (already) failed
    failed,
    /// Transaction failed after committing
    failed-post-commit,
    /// Invalid/unknown transaction
    invalid-tx,
    /// A completely unexpected error
    unexpected(string),
  }

  /// Retrieve a document, inside a transaction
  tx-document-get: func(
    tx: tx-token,
    collection: collection,
    id: document-id
  ) -> result<document-get-result, tx-error>;

  /// Insert a document, inside a transaction
  tx-document-insert: func(
    tx: tx-token,
    id: document-id,
    document: document,
  ) -> result<document-get-result, tx-error>;

  /// Replace a document, inside a transaction
  tx-document-replace: func(
    tx: tx-token,
    old: document,
    new: document,
  ) -> result<document-get-result, tx-error>;

  /// Remove a document, inside a transaction
  tx-document-remove: func(
    tx: tx-token,
    doc: document,
  ) -> result<_, tx-error>;

  /// Options to perform a query inside a transaction
  record transaction-query-options {
    scan-consistency: query-scan-consistency,

    /// Whether or not to profile the query
    profile: option<query-profile-mode>,

    /// Maximum buffered channel size between indexer connection manager and query service
    /// when performing index scans
    scan-cap: u32,

    /// Controls the nubmer of items execution operators can batch for Fetch from KV
    pipeline-batch: u32,

    /// Controls the nubmer of items execution operators can buffer between various operators
    pipeline-cap: u32,

    /// How long the indexer is allowed to wait until it can satisfy consistency criteria (in nanoseconds)
    scan-wait-ns: u64,

    /// Whether the query is readonly
    readonly: bool,

    /// Unique ID for this query which is used by connection manager and the server
    /// A generated UUID value will be assigned if this value is not provided
    client-context-id: option<string>,
  }

  /// A token representing a SQL++ query result inside a transaction (pseudo resource)
  ///
  /// NOTE: In future versions with more widespred WIT Resource support,
  /// this transaction will turn into a transaction resource.
  type tx-sqlpp-query-result-token = string;

  /// Perform a SQL++ query, inside a transaction
  ///
  /// Note: you may *only* use positional parameters in our query
  tx-sqlpp-query: func(
    tx: tx-token,
    stmt: string,
    params: list<sqlpp-value>,
    options: transaction-query-options,
  ) -> result<tx-sqlpp-query-result-token, tx-error>;

  /// Information regarding the result of committing a transaction
  record tx-result {
    /// UUID assigned to the transaction
    id: string,

    /// Whether the transaction was successfully unstaged, or if a later
    /// cleanup job will be responsible
    unstaging-complete: bool,
  }

  /// Retrieve the next value in the query
  tx-sqlpp-query-next: func(
    query: tx-sqlpp-query-result-token,
  ) -> option<document>;

  /// Metadata for a SQL++ query performed during a transaction
  record tx-sqlpp-query-metadata {
    request-id: string,
    /// Unique ID for this query which is used by connection manager and the server
    client-context-id: string,
    status: sqlpp-query-status,
    metrics: sqlpp-query-metrics,
    warnings: list<sqlpp-query-warning>,
  }

  /// Retrieve the metadata from the query
  tx-sqlpp-query-get-metadata: func(
    query: tx-sqlpp-query-result-token,
  ) -> result<tx-sqlpp-query-metadata, tx-error>;

  /// Commit a given transaction
  tx-commit: func(tx: tx-token) -> result<_, tx-error>;
}
