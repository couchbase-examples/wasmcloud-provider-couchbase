// Generated by `wit-bindgen` 0.28.0. DO NOT EDIT!
#ifndef __BINDINGS_HELLO_H
#define __BINDINGS_HELLO_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>

typedef struct hello_string_t {
  uint8_t*ptr;
  size_t len;
} hello_string_t;

// ID of a Document
// 
// Note that Document IDs are expected to be:
// - Assigned at the application level
// - Be valid UTF-8 at the application level
// - Be no longer than 250 bytes (not characters)
typedef hello_string_t wasmcloud_couchbase_types_document_id_t;

// Path to a subdocument inside an existing document
typedef hello_string_t wasmcloud_couchbase_types_subdocument_path_t;

// The span of a request, normally used when performing/enabling tracing
typedef hello_string_t wasmcloud_couchbase_types_request_span_t;

// A string that is properly formatted JSON
typedef hello_string_t wasmcloud_couchbase_types_json_string_t;

// Document field name (ex. to include in a search)
typedef hello_string_t wasmcloud_couchbase_types_document_field_name_t;

// Collection name to include in a search
typedef hello_string_t wasmcloud_couchbase_types_collection_name_t;

// Bucket name
typedef hello_string_t wasmcloud_couchbase_types_bucket_name_t;

// Name of a search index
typedef hello_string_t wasmcloud_couchbase_types_search_index_name_t;

// Whether to enable replica reads for the request
typedef uint8_t wasmcloud_couchbase_types_replica_read_level_t;

#define WASMCLOUD_COUCHBASE_TYPES_REPLICA_READ_LEVEL_OFF 0
#define WASMCLOUD_COUCHBASE_TYPES_REPLICA_READ_LEVEL_ON 1

// Direction in which to perform sorting
typedef uint8_t wasmcloud_couchbase_types_sort_direction_t;

#define WASMCLOUD_COUCHBASE_TYPES_SORT_DIRECTION_ASC 0
#define WASMCLOUD_COUCHBASE_TYPES_SORT_DIRECTION_DESC 1

// Port of https://pkg.go.dev/time#Time
typedef struct wasmcloud_couchbase_types_time_t {
  // Offsets are assumed to be against the western hemisphere (GMT)
  // i.e. -14 -> 0 -> +14 UTC
  int8_t   offset;
  int32_t   year;
  uint8_t   month;
  uint8_t   day;
  // 24hr time (i.e. 6PM is represented as `18`)
  uint8_t   hour;
  uint8_t   minute;
  uint8_t   second;
  uint32_t   milliseconds;
  uint32_t   nanoseconds;
} wasmcloud_couchbase_types_time_t;

typedef struct {
  bool is_some;
  hello_string_t val;
} hello_option_string_t;

// A keyspace-path that identifies a collection
typedef struct wasmcloud_couchbase_types_collection_t {
  // Bucket the collection belongs to
  wasmcloud_couchbase_types_bucket_name_t   bucket;
  // Scope of the collection (ex. "_default" if not specified)
  hello_option_string_t   scope;
  // Name of the collection (which may be a simple name, if only this value is specified)
  wasmcloud_couchbase_types_collection_name_t   name;
} wasmcloud_couchbase_types_collection_t;

// Errors that can occur during operations on documents
typedef struct wasmcloud_couchbase_types_document_error_t {
  uint8_t tag;
} wasmcloud_couchbase_types_document_error_t;

// Document could not be found
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_ERROR_NOT_FOUND 0
// CAS revision submitted to operation does not match value on server
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_ERROR_CAS_MISMATCH 1
// Document is locked
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_ERROR_LOCKED 2
// Unlock con a document that is not locked
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_ERROR_NOT_LOCKED 3
// Document cannot be retrieved (from any replica)
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_ERROR_UNRETRIEVABLE 4
// Document already exists (i.e. a duplicate)
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_ERROR_ALREADY_EXISTS 5
// Document is not JSON
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_ERROR_NOT_JSON 6
// Document does not contain the specified sub-document path
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_ERROR_PATH_NOT_FOUND 7
// Sub-document path is invalid (could not be parsed)
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_ERROR_PATH_INVALID 8
// Sub-document path is too deeply nested
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_ERROR_PATH_TOO_DEEP 9
// Sub-document operation could not insert
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_ERROR_INVALID_VALUE 10
// An invalid delta is used when performing a sub-document operation
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_ERROR_SUBDOCUMENT_DELTA_INVALID 11

// Errors that occur when building/using document values
typedef struct wasmcloud_couchbase_types_document_value_create_error_t {
  uint8_t tag;
  union {
    hello_string_t     invalid_json;
  } val;
} wasmcloud_couchbase_types_document_value_create_error_t;

// JSON used to create the document value was invalid
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_VALUE_CREATE_ERROR_INVALID_JSON 0

typedef struct wasmcloud_couchbase_types_own_document_value_t {
  int32_t __handle;
} wasmcloud_couchbase_types_own_document_value_t;

typedef struct wasmcloud_couchbase_types_borrow_document_value_t {
  int32_t __handle;
} wasmcloud_couchbase_types_borrow_document_value_t;

// WIT cannot currently support passing recursive value types, which means JSON cannot be properly
// represetned as a WIT level type.
// 
// What we use instead is a variant with two types:
// - a valid JSON string (which may or may not be an object)
// - an implementer-controlled value which is a valid JSON object (as defined by the implementer)
// 
// The implementer-controlled value can be any implementation (usually a more efficient one)
// that can be understood by the implementer. One requirement on this value is that it must be
// possible to convert it to/from a raw JSON string at any time.
// 
// An opaque resource that represents a JSON value, and can be efficiently
// manipulated by implementers.
typedef struct wasmcloud_couchbase_types_document_t {
  uint8_t tag;
  union {
    wasmcloud_couchbase_types_json_string_t     raw;
    wasmcloud_couchbase_types_own_document_value_t     resource;
  } val;
} wasmcloud_couchbase_types_document_t;

// A stringified JSON value represented by a resource, often used by callers
// that cannot or do not want to construct an efficient implementer specific JSON value
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_RAW 0
// A JSON value represented by a more efficient but opaque implementer-specific representation
#define WASMCLOUD_COUCHBASE_TYPES_DOCUMENT_RESOURCE 1

// Errors related to bucket usage
typedef struct wasmcloud_couchbase_types_bucket_error_t {
  uint8_t tag;
  union {
    hello_string_t     unexpected;
  } val;
} wasmcloud_couchbase_types_bucket_error_t;

// A completely unexpected error
#define WASMCLOUD_COUCHBASE_TYPES_BUCKET_ERROR_UNEXPECTED 0

// Metadata related to any mutation on a Couchbase collection (ex. CRUD operations)
typedef struct wasmcloud_couchbase_types_mutation_metadata_t {
  // CAS revision of the document
  uint64_t   cas;
  // The bucket on which the mutation was performed
  hello_string_t   bucket;
  // The ID of the vbucket (partition) that the operation was performed on
  uint64_t   partition_id;
  // The UUID of the vbucket (partition) that the operation was performed on
  uint64_t   partition_uuid;
  // The sequence number of the operation performed on the vbucket (partition)
  uint64_t   seq;
} wasmcloud_couchbase_types_mutation_metadata_t;

// Durability level that should be used for operations
typedef uint8_t wasmcloud_couchbase_types_durability_level_t;

#define WASMCLOUD_COUCHBASE_TYPES_DURABILITY_LEVEL_UNKNOWN 0
#define WASMCLOUD_COUCHBASE_TYPES_DURABILITY_LEVEL_NONE 1
// Replicate (hold in memory) to a majority of nodes
#define WASMCLOUD_COUCHBASE_TYPES_DURABILITY_LEVEL_REPLICATE_MAJORITY 2
// Replicate (hold in memory) to a majority of nodes, persist (write to disk) to master
#define WASMCLOUD_COUCHBASE_TYPES_DURABILITY_LEVEL_REPLICATE_MAJORITY_PERSIST_MASTER 3
// Persist to a majority of nodes
#define WASMCLOUD_COUCHBASE_TYPES_DURABILITY_LEVEL_PERSIST_MAJORITY 4

typedef struct {
  uint64_t f0;
  uint64_t f1;
} hello_tuple2_u64_u64_t;

// As functions cannot be represented as part of types in WIT,
// we represent static retry strategies
typedef struct wasmcloud_couchbase_types_retry_strategy_t {
  uint8_t tag;
  union {
    hello_tuple2_u64_u64_t     interval_times_ms;
  } val;
} wasmcloud_couchbase_types_retry_strategy_t;

// Retry a certain number of times with a given interval between each retry)
#define WASMCLOUD_COUCHBASE_TYPES_RETRY_STRATEGY_INTERVAL_TIMES_MS 0

// Level of data consistency required for a query
typedef uint8_t wasmcloud_couchbase_types_query_scan_consistency_t;

// No data consistency required
#define WASMCLOUD_COUCHBASE_TYPES_QUERY_SCAN_CONSISTENCY_NOT_BOUNDED 0
// Request-level data consistency is required
#define WASMCLOUD_COUCHBASE_TYPES_QUERY_SCAN_CONSISTENCY_REQUEST_PLUS 1

// Profiling mode to use during a query
typedef uint8_t wasmcloud_couchbase_types_query_profile_mode_t;

// Disable query profiling
#define WASMCLOUD_COUCHBASE_TYPES_QUERY_PROFILE_MODE_NONE 0
// Include phase-boudned profiling information in the response
#define WASMCLOUD_COUCHBASE_TYPES_QUERY_PROFILE_MODE_PHASES 1
// Include timing profiling informatoin in the query response
#define WASMCLOUD_COUCHBASE_TYPES_QUERY_PROFILE_MODE_TIMINGS 2

// Level of data consistency required for a search
typedef uint8_t wasmcloud_couchbase_types_search_scan_consistency_t;

// No data consistency required
#define WASMCLOUD_COUCHBASE_TYPES_SEARCH_SCAN_CONSISTENCY_NOT_BOUNDED 0

// Individual mutation token
typedef struct wasmcloud_couchbase_types_mutation_token_t {
  hello_string_t   bucket_name;
  uint64_t   partition_uuid;
  uint64_t   partition_id;
  uint64_t   sequence_number;
} wasmcloud_couchbase_types_mutation_token_t;

typedef struct {
  wasmcloud_couchbase_types_mutation_token_t *ptr;
  size_t len;
} wasmcloud_couchbase_types_list_mutation_token_t;

// Collection of mutation tokens that represent a single state
typedef struct wasmcloud_couchbase_types_mutation_state_t {
  wasmcloud_couchbase_types_list_mutation_token_t   tokens;
} wasmcloud_couchbase_types_mutation_state_t;

typedef struct {
  bool is_err;
  union {
    wasmcloud_couchbase_types_own_document_value_t ok;
    wasmcloud_couchbase_types_document_value_create_error_t err;
  } val;
} wasmcloud_couchbase_types_result_own_document_value_document_value_create_error_t;

typedef wasmcloud_couchbase_types_document_t wasmcloud_couchbase_document_document_t;

typedef wasmcloud_couchbase_types_document_id_t wasmcloud_couchbase_document_document_id_t;

typedef wasmcloud_couchbase_types_document_error_t wasmcloud_couchbase_document_document_error_t;

typedef wasmcloud_couchbase_types_mutation_metadata_t wasmcloud_couchbase_document_mutation_metadata_t;

typedef wasmcloud_couchbase_types_time_t wasmcloud_couchbase_document_time_t;

typedef wasmcloud_couchbase_types_durability_level_t wasmcloud_couchbase_document_durability_level_t;

typedef wasmcloud_couchbase_types_retry_strategy_t wasmcloud_couchbase_document_retry_strategy_t;

typedef wasmcloud_couchbase_types_request_span_t wasmcloud_couchbase_document_request_span_t;

typedef wasmcloud_couchbase_types_replica_read_level_t wasmcloud_couchbase_document_replica_read_level_t;

typedef struct {
  bool is_some;
  uint64_t val;
} hello_option_u64_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_retry_strategy_t val;
} wasmcloud_couchbase_document_option_retry_strategy_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_request_span_t val;
} hello_option_request_span_t;

// Document - Insert ///
// 
// Options for performing a document insert
typedef struct wasmcloud_couchbase_document_document_insert_options_t {
  // When the document should expire (nanoseconds)
  uint64_t   expires_in_ns;
  // (Deprecated)
  // Traditional durability settings for persistence, only usable from Couchbase versions earlier than 6.0
  // 
  // See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
  uint64_t   persist_to;
  // (Deprecated)
  // Traditional durability settings for replication, only usable from Couchbase versions earlier than 6.0
  // 
  // See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
  uint64_t   replicate_to;
  // Durability level for the mutation
  // 
  // (this should be used instead of persist-to/replicate-to)
  wasmcloud_couchbase_document_durability_level_t   durability_level;
  // Timeout that should be used, in nanoseconds
  // Even if a timeout is not specified, the implementer *may* provide a default timeout.
  hello_option_u64_t   timeout_ns;
  // How and whether to retry the operation
  wasmcloud_couchbase_document_option_retry_strategy_t   retry_strategy;
  // A known span to associate this lookup with
  hello_option_request_span_t   parent_span;
} wasmcloud_couchbase_document_document_insert_options_t;

// Document - Replace ///
// 
// Options for performing a document replace
typedef struct wasmcloud_couchbase_document_document_replace_options_t {
  // CAS revision of the document
  uint64_t   cas;
  // When the document should expire (nanoseconds)
  uint64_t   expires_in_ns;
  // Whether to preserve expiration values set on any documents modified by the query
  bool   preserve_expiry;
  // (Deprecated)
  // Traditional durability settings for persistence, only usable from Couchbase versions earlier than 6.0
  // 
  // See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
  uint64_t   persist_to;
  // (Deprecated)
  // Traditional durability settings for replication, only usable from Couchbase versions earlier than 6.0
  // 
  // See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
  uint64_t   replicate_to;
  // Durability level for the mutation
  // 
  // (this should be used instead of persist-to/replicate-to)
  wasmcloud_couchbase_document_durability_level_t   durability_level;
  // Timeout that should be used, in nanoseconds
  // Even if a timeout is not specified, the implementer *may* provide a default timeout.
  hello_option_u64_t   timeout_ns;
  // How and whether to retry the operation
  wasmcloud_couchbase_document_option_retry_strategy_t   retry_strategy;
  // A known span to associate this lookup with
  hello_option_request_span_t   parent_span;
} wasmcloud_couchbase_document_document_replace_options_t;

// Document - Upsert ///
// 
// Options for performing a document upsert
typedef struct wasmcloud_couchbase_document_document_upsert_options_t {
  // When the document should expire (nanoseconds)
  uint64_t   expires_in_ns;
  // Whether to preserve expiration values set on any documents modified by the query
  bool   preserve_expiry;
  // (Deprecated)
  // Traditional durability settings for persistence, only usable from Couchbase versions earlier than 6.0
  // 
  // See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
  uint64_t   persist_to;
  // (Deprecated)
  // Traditional durability settings for replication, only usable from Couchbase versions earlier than 6.0
  // 
  // See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
  uint64_t   replicate_to;
  // Durability level for the mutation
  // 
  // (this should be used instead of persist-to/replicate-to)
  wasmcloud_couchbase_document_durability_level_t   durability_level;
  // Timeout that should be used, in nanoseconds
  // Even if a timeout is not specified, the implementer *may* provide a default timeout.
  hello_option_u64_t   timeout_ns;
  // How and whether to retry the operation
  wasmcloud_couchbase_document_option_retry_strategy_t   retry_strategy;
  // A known span to associate this lookup with
  hello_option_request_span_t   parent_span;
} wasmcloud_couchbase_document_document_upsert_options_t;

typedef struct {
  hello_string_t *ptr;
  size_t len;
} hello_list_string_t;

typedef struct {
  bool is_some;
  hello_list_string_t val;
} hello_option_list_string_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_replica_read_level_t val;
} wasmcloud_couchbase_document_option_replica_read_level_t;

// Document - Get ///
// 
// Options for performing a document get
typedef struct wasmcloud_couchbase_document_document_get_options_t {
  // Whether expiry should also be retreived
  bool   with_expiry;
  // Perform a projection of only specific paths of the result, returning only
  // the fields indicated by the given list of paths.
  hello_option_list_string_t   project;
  // Timeout that should be used, in nanoseconds
  // If not specified, the implementer *may* provide a default timeout.
  hello_option_u64_t   timeout_ns;
  // How and whether to retry the operation
  wasmcloud_couchbase_document_option_retry_strategy_t   retry_strategy;
  // Level of replica read to enable
  wasmcloud_couchbase_document_option_replica_read_level_t   use_replica;
  // A known span to associate this lookup with
  hello_option_request_span_t   parent_span;
} wasmcloud_couchbase_document_document_get_options_t;

// Options for retrieving a document from any replica
typedef struct wasmcloud_couchbase_document_document_get_any_replica_options_t {
  // Timeout that should be used, in nanoseconds
  // If not specified, the implementer *may* provide a default timeout.
  hello_option_u64_t   timeout_ns;
  // How and whether to retry the operation
  wasmcloud_couchbase_document_option_retry_strategy_t   retry_strategy;
  // A known span to associate this lookup with
  hello_option_request_span_t   parent_span;
} wasmcloud_couchbase_document_document_get_any_replica_options_t;

// Options for retrieving a document from any replica
typedef struct wasmcloud_couchbase_document_document_get_all_replica_options_t {
  // Timeout that should be used, in nanoseconds
  // If not specified, the implementer *may* provide a default timeout.
  hello_option_u64_t   timeout_ns;
  // How and whether to retry the operation
  wasmcloud_couchbase_document_option_retry_strategy_t   retry_strategy;
  // A known span to associate this lookup with
  hello_option_request_span_t   parent_span;
} wasmcloud_couchbase_document_document_get_all_replica_options_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_time_t val;
} wasmcloud_couchbase_document_option_time_t;

// Result of a successfully executed document get
typedef struct wasmcloud_couchbase_document_document_get_result_t {
  // Document that was retrieved
  wasmcloud_couchbase_document_document_t   document;
  // CAS revision of the document
  uint64_t   cas;
  // When the document should expire (nanoseconds)
  // 
  // Deprecated: use expires-at instead
  hello_option_u64_t   expires_in_ns;
  // Time when the document expires
  // 
  // This field may not be present if `document-get-options.with-expiry` is not set
  wasmcloud_couchbase_document_option_time_t   expires_at;
} wasmcloud_couchbase_document_document_get_result_t;

// Result from a replica-aware document get
typedef struct wasmcloud_couchbase_document_document_get_replica_result_t {
  // Whether this document came from a replica server
  bool   is_replica;
  // CAS revision of the document
  uint64_t   cas;
  // Document that was retrieved
  wasmcloud_couchbase_document_document_t   document;
  // When the document should expire (nanoseconds)
  // 
  // Deprecated: use expires-at instead
  hello_option_u64_t   expires_in_ns;
  // Time when the document expires
  // 
  // This field may not be present if `document-get-options.with-expiry` is not set
  wasmcloud_couchbase_document_option_time_t   expires_at;
} wasmcloud_couchbase_document_document_get_replica_result_t;

// Document - Remove ///
// 
// Options for performing a document remove
typedef struct wasmcloud_couchbase_document_document_remove_options_t {
  // CAS revision of the document
  uint64_t   cas;
  // (Deprecated)
  // Traditional durability settings for persistence, only usable from Couchbase versions earlier than 6.0
  // 
  // See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
  uint64_t   persist_to;
  // (Deprecated)
  // Traditional durability settings for replication, only usable from Couchbase versions earlier than 6.0
  // 
  // See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
  uint64_t   replicate_to;
  // Durability level for the mutation
  // 
  // (this should be used instead of persist-to/replicate-to)
  wasmcloud_couchbase_document_durability_level_t   durability_level;
  // Timeout that should be used, in nanoseconds
  // Even if a timeout is not specified, the implementer *may* provide a default timeout.
  hello_option_u64_t   timeout_ns;
  // How and whether to retry the operation
  wasmcloud_couchbase_document_option_retry_strategy_t   retry_strategy;
  // A known span to associate this lookup with
  hello_option_request_span_t   parent_span;
} wasmcloud_couchbase_document_document_remove_options_t;

// Document - Get and Lock ///
// 
// Options for performing a document lock
typedef struct wasmcloud_couchbase_document_document_get_and_lock_options_t {
  // Amount of time to lock the document (nanoseconds)
  uint64_t   lock_time;
  // Timeout that should be used, in nanoseconds
  // Even if a timeout is not specified, the implementer *may* provide a default timeout.
  hello_option_u64_t   timeout_ns;
  // How and whether to retry the operation
  wasmcloud_couchbase_document_option_retry_strategy_t   retry_strategy;
  // A known span to associate this lookup with
  hello_option_request_span_t   parent_span;
} wasmcloud_couchbase_document_document_get_and_lock_options_t;

// Document - Unlock ///
// 
// Options for performing a document lock
typedef struct wasmcloud_couchbase_document_document_unlock_options_t {
  // CAS revision of the document
  uint64_t   cas;
  // Timeout that should be used, in nanoseconds
  // Even if a timeout is not specified, the implementer *may* provide a default timeout.
  hello_option_u64_t   timeout_ns;
  // How and whether to retry the operation
  wasmcloud_couchbase_document_option_retry_strategy_t   retry_strategy;
  // A known span to associate this lookup with
  hello_option_request_span_t   parent_span;
} wasmcloud_couchbase_document_document_unlock_options_t;

// Document - Touch ///
// 
// Options for performing a document lock
typedef struct wasmcloud_couchbase_document_document_touch_options_t {
  // Time until the document expires (nanoseconds)
  uint64_t   expires_in;
  // Timeout that should be used, in nanoseconds
  // Even if a timeout is not specified, the implementer *may* provide a default timeout.
  hello_option_u64_t   timeout_ns;
  // How and whether to retry the operation
  wasmcloud_couchbase_document_option_retry_strategy_t   retry_strategy;
  // A known span to associate this lookup with
  hello_option_request_span_t   parent_span;
} wasmcloud_couchbase_document_document_touch_options_t;

// Document - Get and Touch ///
// 
// Options for performing a document touch
typedef struct wasmcloud_couchbase_document_document_get_and_touch_options_t {
  // Time until the document expires (nanoseconds)
  uint64_t   expires_in;
  // Timeout that should be used, in nanoseconds
  // Even if a timeout is not specified, the implementer *may* provide a default timeout.
  hello_option_u64_t   timeout_ns;
  // How and whether to retry the operation
  wasmcloud_couchbase_document_option_retry_strategy_t   retry_strategy;
  // A known span to associate this lookup with
  hello_option_request_span_t   parent_span;
} wasmcloud_couchbase_document_document_get_and_touch_options_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_document_insert_options_t val;
} wasmcloud_couchbase_document_option_document_insert_options_t;

typedef struct {
  bool is_err;
  union {
    wasmcloud_couchbase_document_mutation_metadata_t ok;
    wasmcloud_couchbase_document_document_error_t err;
  } val;
} wasmcloud_couchbase_document_result_mutation_metadata_document_error_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_document_replace_options_t val;
} wasmcloud_couchbase_document_option_document_replace_options_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_document_upsert_options_t val;
} wasmcloud_couchbase_document_option_document_upsert_options_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_document_get_options_t val;
} wasmcloud_couchbase_document_option_document_get_options_t;

typedef struct {
  bool is_err;
  union {
    wasmcloud_couchbase_document_document_get_result_t ok;
    wasmcloud_couchbase_document_document_error_t err;
  } val;
} wasmcloud_couchbase_document_result_document_get_result_document_error_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_document_get_any_replica_options_t val;
} wasmcloud_couchbase_document_option_document_get_any_replica_options_t;

typedef struct {
  bool is_err;
  union {
    wasmcloud_couchbase_document_document_get_replica_result_t ok;
    wasmcloud_couchbase_document_document_error_t err;
  } val;
} wasmcloud_couchbase_document_result_document_get_replica_result_document_error_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_document_get_all_replica_options_t val;
} wasmcloud_couchbase_document_option_document_get_all_replica_options_t;

typedef struct {
  wasmcloud_couchbase_document_document_get_replica_result_t *ptr;
  size_t len;
} wasmcloud_couchbase_document_list_document_get_replica_result_t;

typedef struct {
  bool is_err;
  union {
    wasmcloud_couchbase_document_list_document_get_replica_result_t ok;
    wasmcloud_couchbase_document_document_error_t err;
  } val;
} wasmcloud_couchbase_document_result_list_document_get_replica_result_document_error_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_document_remove_options_t val;
} wasmcloud_couchbase_document_option_document_remove_options_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_document_get_and_lock_options_t val;
} wasmcloud_couchbase_document_option_document_get_and_lock_options_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_document_unlock_options_t val;
} wasmcloud_couchbase_document_option_document_unlock_options_t;

typedef struct {
  bool is_err;
  union {
    wasmcloud_couchbase_document_document_error_t err;
  } val;
} wasmcloud_couchbase_document_result_void_document_error_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_document_touch_options_t val;
} wasmcloud_couchbase_document_option_document_touch_options_t;

typedef struct {
  bool is_some;
  wasmcloud_couchbase_document_document_get_and_touch_options_t val;
} wasmcloud_couchbase_document_option_document_get_and_touch_options_t;

typedef struct wasi_io_poll_own_pollable_t {
  int32_t __handle;
} wasi_io_poll_own_pollable_t;

typedef struct wasi_io_poll_borrow_pollable_t {
  int32_t __handle;
} wasi_io_poll_borrow_pollable_t;

typedef struct {
  wasi_io_poll_borrow_pollable_t *ptr;
  size_t len;
} wasi_io_poll_list_borrow_pollable_t;

typedef struct {
  uint32_t *ptr;
  size_t len;
} hello_list_u32_t;

// An instant in time, in nanoseconds. An instant is relative to an
// unspecified initial value, and can only be compared to instances from
// the same monotonic-clock.
typedef uint64_t wasi_clocks_monotonic_clock_instant_t;

// A duration of time, in nanoseconds.
typedef uint64_t wasi_clocks_monotonic_clock_duration_t;

typedef wasi_io_poll_own_pollable_t wasi_clocks_monotonic_clock_own_pollable_t;

typedef struct wasi_io_error_own_error_t {
  int32_t __handle;
} wasi_io_error_own_error_t;

typedef struct wasi_io_error_borrow_error_t {
  int32_t __handle;
} wasi_io_error_borrow_error_t;

typedef wasi_io_error_own_error_t wasi_io_streams_own_error_t;

// An error for input-stream and output-stream operations.
typedef struct wasi_io_streams_stream_error_t {
  uint8_t tag;
  union {
    wasi_io_streams_own_error_t     last_operation_failed;
  } val;
} wasi_io_streams_stream_error_t;

// The last operation (a write or flush) failed before completion.
// 
// More information is available in the `error` payload.
#define WASI_IO_STREAMS_STREAM_ERROR_LAST_OPERATION_FAILED 0
// The stream is closed: no more input will be accepted by the
// stream. A closed output-stream will return this error on all
// future operations.
#define WASI_IO_STREAMS_STREAM_ERROR_CLOSED 1

typedef struct wasi_io_streams_own_input_stream_t {
  int32_t __handle;
} wasi_io_streams_own_input_stream_t;

typedef struct wasi_io_streams_borrow_input_stream_t {
  int32_t __handle;
} wasi_io_streams_borrow_input_stream_t;

typedef struct wasi_io_streams_own_output_stream_t {
  int32_t __handle;
} wasi_io_streams_own_output_stream_t;

typedef struct wasi_io_streams_borrow_output_stream_t {
  int32_t __handle;
} wasi_io_streams_borrow_output_stream_t;

typedef struct {
  uint8_t *ptr;
  size_t len;
} hello_list_u8_t;

typedef struct {
  bool is_err;
  union {
    hello_list_u8_t ok;
    wasi_io_streams_stream_error_t err;
  } val;
} wasi_io_streams_result_list_u8_stream_error_t;

typedef struct {
  bool is_err;
  union {
    uint64_t ok;
    wasi_io_streams_stream_error_t err;
  } val;
} wasi_io_streams_result_u64_stream_error_t;

typedef wasi_io_poll_own_pollable_t wasi_io_streams_own_pollable_t;

typedef struct {
  bool is_err;
  union {
    wasi_io_streams_stream_error_t err;
  } val;
} wasi_io_streams_result_void_stream_error_t;

typedef wasi_clocks_monotonic_clock_duration_t wasi_http_types_duration_t;

// This type corresponds to HTTP standard Methods.
typedef struct wasi_http_types_method_t {
  uint8_t tag;
  union {
    hello_string_t     other;
  } val;
} wasi_http_types_method_t;

#define WASI_HTTP_TYPES_METHOD_GET 0
#define WASI_HTTP_TYPES_METHOD_HEAD 1
#define WASI_HTTP_TYPES_METHOD_POST 2
#define WASI_HTTP_TYPES_METHOD_PUT 3
#define WASI_HTTP_TYPES_METHOD_DELETE 4
#define WASI_HTTP_TYPES_METHOD_CONNECT 5
#define WASI_HTTP_TYPES_METHOD_OPTIONS 6
#define WASI_HTTP_TYPES_METHOD_TRACE 7
#define WASI_HTTP_TYPES_METHOD_PATCH 8
#define WASI_HTTP_TYPES_METHOD_OTHER 9

// This type corresponds to HTTP standard Related Schemes.
typedef struct wasi_http_types_scheme_t {
  uint8_t tag;
  union {
    hello_string_t     other;
  } val;
} wasi_http_types_scheme_t;

#define WASI_HTTP_TYPES_SCHEME_HTTP 0
#define WASI_HTTP_TYPES_SCHEME_HTTPS 1
#define WASI_HTTP_TYPES_SCHEME_OTHER 2

typedef struct {
  bool is_some;
  uint16_t val;
} hello_option_u16_t;

// Defines the case payload type for `DNS-error` above:
typedef struct wasi_http_types_dns_error_payload_t {
  hello_option_string_t   rcode;
  hello_option_u16_t   info_code;
} wasi_http_types_dns_error_payload_t;

typedef struct {
  bool is_some;
  uint8_t val;
} hello_option_u8_t;

// Defines the case payload type for `TLS-alert-received` above:
typedef struct wasi_http_types_tls_alert_received_payload_t {
  hello_option_u8_t   alert_id;
  hello_option_string_t   alert_message;
} wasi_http_types_tls_alert_received_payload_t;

typedef struct {
  bool is_some;
  uint32_t val;
} hello_option_u32_t;

// Defines the case payload type for `HTTP-response-{header,trailer}-size` above:
typedef struct wasi_http_types_field_size_payload_t {
  hello_option_string_t   field_name;
  hello_option_u32_t   field_size;
} wasi_http_types_field_size_payload_t;

typedef struct {
  bool is_some;
  wasi_http_types_field_size_payload_t val;
} wasi_http_types_option_field_size_payload_t;

// These cases are inspired by the IANA HTTP Proxy Error Types:
// https://www.iana.org/assignments/http-proxy-status/http-proxy-status.xhtml#table-http-proxy-error-types
typedef struct wasi_http_types_error_code_t {
  uint8_t tag;
  union {
    wasi_http_types_dns_error_payload_t     dns_error;
    wasi_http_types_tls_alert_received_payload_t     tls_alert_received;
    hello_option_u64_t     http_request_body_size;
    hello_option_u32_t     http_request_header_section_size;
    wasi_http_types_option_field_size_payload_t     http_request_header_size;
    hello_option_u32_t     http_request_trailer_section_size;
    wasi_http_types_field_size_payload_t     http_request_trailer_size;
    hello_option_u32_t     http_response_header_section_size;
    wasi_http_types_field_size_payload_t     http_response_header_size;
    hello_option_u64_t     http_response_body_size;
    hello_option_u32_t     http_response_trailer_section_size;
    wasi_http_types_field_size_payload_t     http_response_trailer_size;
    hello_option_string_t     http_response_transfer_coding;
    hello_option_string_t     http_response_content_coding;
    hello_option_string_t     internal_error;
  } val;
} wasi_http_types_error_code_t;

#define WASI_HTTP_TYPES_ERROR_CODE_DNS_TIMEOUT 0
#define WASI_HTTP_TYPES_ERROR_CODE_DNS_ERROR 1
#define WASI_HTTP_TYPES_ERROR_CODE_DESTINATION_NOT_FOUND 2
#define WASI_HTTP_TYPES_ERROR_CODE_DESTINATION_UNAVAILABLE 3
#define WASI_HTTP_TYPES_ERROR_CODE_DESTINATION_IP_PROHIBITED 4
#define WASI_HTTP_TYPES_ERROR_CODE_DESTINATION_IP_UNROUTABLE 5
#define WASI_HTTP_TYPES_ERROR_CODE_CONNECTION_REFUSED 6
#define WASI_HTTP_TYPES_ERROR_CODE_CONNECTION_TERMINATED 7
#define WASI_HTTP_TYPES_ERROR_CODE_CONNECTION_TIMEOUT 8
#define WASI_HTTP_TYPES_ERROR_CODE_CONNECTION_READ_TIMEOUT 9
#define WASI_HTTP_TYPES_ERROR_CODE_CONNECTION_WRITE_TIMEOUT 10
#define WASI_HTTP_TYPES_ERROR_CODE_CONNECTION_LIMIT_REACHED 11
#define WASI_HTTP_TYPES_ERROR_CODE_TLS_PROTOCOL_ERROR 12
#define WASI_HTTP_TYPES_ERROR_CODE_TLS_CERTIFICATE_ERROR 13
#define WASI_HTTP_TYPES_ERROR_CODE_TLS_ALERT_RECEIVED 14
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_REQUEST_DENIED 15
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_REQUEST_LENGTH_REQUIRED 16
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_REQUEST_BODY_SIZE 17
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_REQUEST_METHOD_INVALID 18
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_REQUEST_URI_INVALID 19
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_REQUEST_URI_TOO_LONG 20
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_REQUEST_HEADER_SECTION_SIZE 21
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_REQUEST_HEADER_SIZE 22
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_REQUEST_TRAILER_SECTION_SIZE 23
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_REQUEST_TRAILER_SIZE 24
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_RESPONSE_INCOMPLETE 25
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_RESPONSE_HEADER_SECTION_SIZE 26
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_RESPONSE_HEADER_SIZE 27
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_RESPONSE_BODY_SIZE 28
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_RESPONSE_TRAILER_SECTION_SIZE 29
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_RESPONSE_TRAILER_SIZE 30
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_RESPONSE_TRANSFER_CODING 31
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_RESPONSE_CONTENT_CODING 32
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_RESPONSE_TIMEOUT 33
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_UPGRADE_FAILED 34
#define WASI_HTTP_TYPES_ERROR_CODE_HTTP_PROTOCOL_ERROR 35
#define WASI_HTTP_TYPES_ERROR_CODE_LOOP_DETECTED 36
#define WASI_HTTP_TYPES_ERROR_CODE_CONFIGURATION_ERROR 37
// This is a catch-all error for anything that doesn't fit cleanly into a
// more specific case. It also includes an optional string for an
// unstructured description of the error. Users should not depend on the
// string for diagnosing errors, as it's not required to be consistent
// between implementations.
#define WASI_HTTP_TYPES_ERROR_CODE_INTERNAL_ERROR 38

// This type enumerates the different kinds of errors that may occur when
// setting or appending to a `fields` resource.
typedef struct wasi_http_types_header_error_t {
  uint8_t tag;
} wasi_http_types_header_error_t;

// This error indicates that a `field-key` or `field-value` was
// syntactically invalid when used with an operation that sets headers in a
// `fields`.
#define WASI_HTTP_TYPES_HEADER_ERROR_INVALID_SYNTAX 0
// This error indicates that a forbidden `field-key` was used when trying
// to set a header in a `fields`.
#define WASI_HTTP_TYPES_HEADER_ERROR_FORBIDDEN 1
// This error indicates that the operation on the `fields` was not
// permitted because the fields are immutable.
#define WASI_HTTP_TYPES_HEADER_ERROR_IMMUTABLE 2

// Field keys are always strings.
typedef hello_string_t wasi_http_types_field_key_t;

// Field values should always be ASCII strings. However, in
// reality, HTTP implementations often have to interpret malformed values,
// so they are provided as a list of bytes.
typedef struct wasi_http_types_field_value_t {
  uint8_t   *ptr;
  size_t len;
} wasi_http_types_field_value_t;

typedef struct wasi_http_types_own_fields_t {
  int32_t __handle;
} wasi_http_types_own_fields_t;

typedef struct wasi_http_types_borrow_fields_t {
  int32_t __handle;
} wasi_http_types_borrow_fields_t;

typedef struct wasi_http_types_own_incoming_request_t {
  int32_t __handle;
} wasi_http_types_own_incoming_request_t;

typedef struct wasi_http_types_borrow_incoming_request_t {
  int32_t __handle;
} wasi_http_types_borrow_incoming_request_t;

typedef struct wasi_http_types_own_outgoing_request_t {
  int32_t __handle;
} wasi_http_types_own_outgoing_request_t;

typedef struct wasi_http_types_borrow_outgoing_request_t {
  int32_t __handle;
} wasi_http_types_borrow_outgoing_request_t;

typedef struct wasi_http_types_own_request_options_t {
  int32_t __handle;
} wasi_http_types_own_request_options_t;

typedef struct wasi_http_types_borrow_request_options_t {
  int32_t __handle;
} wasi_http_types_borrow_request_options_t;

typedef struct wasi_http_types_own_response_outparam_t {
  int32_t __handle;
} wasi_http_types_own_response_outparam_t;

typedef struct wasi_http_types_borrow_response_outparam_t {
  int32_t __handle;
} wasi_http_types_borrow_response_outparam_t;

// This type corresponds to the HTTP standard Status Code.
typedef uint16_t wasi_http_types_status_code_t;

typedef struct wasi_http_types_own_incoming_response_t {
  int32_t __handle;
} wasi_http_types_own_incoming_response_t;

typedef struct wasi_http_types_borrow_incoming_response_t {
  int32_t __handle;
} wasi_http_types_borrow_incoming_response_t;

typedef struct wasi_http_types_own_incoming_body_t {
  int32_t __handle;
} wasi_http_types_own_incoming_body_t;

typedef struct wasi_http_types_borrow_incoming_body_t {
  int32_t __handle;
} wasi_http_types_borrow_incoming_body_t;

typedef struct wasi_http_types_own_future_trailers_t {
  int32_t __handle;
} wasi_http_types_own_future_trailers_t;

typedef struct wasi_http_types_borrow_future_trailers_t {
  int32_t __handle;
} wasi_http_types_borrow_future_trailers_t;

typedef struct wasi_http_types_own_outgoing_response_t {
  int32_t __handle;
} wasi_http_types_own_outgoing_response_t;

typedef struct wasi_http_types_borrow_outgoing_response_t {
  int32_t __handle;
} wasi_http_types_borrow_outgoing_response_t;

typedef struct wasi_http_types_own_outgoing_body_t {
  int32_t __handle;
} wasi_http_types_own_outgoing_body_t;

typedef struct wasi_http_types_borrow_outgoing_body_t {
  int32_t __handle;
} wasi_http_types_borrow_outgoing_body_t;

typedef struct wasi_http_types_own_future_incoming_response_t {
  int32_t __handle;
} wasi_http_types_own_future_incoming_response_t;

typedef struct wasi_http_types_borrow_future_incoming_response_t {
  int32_t __handle;
} wasi_http_types_borrow_future_incoming_response_t;

typedef wasi_io_error_borrow_error_t wasi_http_types_borrow_io_error_t;

typedef struct {
  bool is_some;
  wasi_http_types_error_code_t val;
} wasi_http_types_option_error_code_t;

typedef struct {
  wasi_http_types_field_key_t f0;
  wasi_http_types_field_value_t f1;
} hello_tuple2_field_key_field_value_t;

typedef struct {
  hello_tuple2_field_key_field_value_t *ptr;
  size_t len;
} hello_list_tuple2_field_key_field_value_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_own_fields_t ok;
    wasi_http_types_header_error_t err;
  } val;
} wasi_http_types_result_own_fields_header_error_t;

typedef struct {
  wasi_http_types_field_value_t *ptr;
  size_t len;
} hello_list_field_value_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_header_error_t err;
  } val;
} wasi_http_types_result_void_header_error_t;

typedef struct {
  bool is_some;
  wasi_http_types_scheme_t val;
} wasi_http_types_option_scheme_t;

typedef wasi_http_types_own_fields_t wasi_http_types_own_headers_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_own_incoming_body_t ok;
  } val;
} wasi_http_types_result_own_incoming_body_void_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_own_outgoing_body_t ok;
  } val;
} wasi_http_types_result_own_outgoing_body_void_t;

typedef struct {
  bool is_err;
} wasi_http_types_result_void_void_t;

typedef struct {
  bool is_some;
  wasi_http_types_duration_t val;
} hello_option_duration_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_own_outgoing_response_t ok;
    wasi_http_types_error_code_t err;
  } val;
} wasi_http_types_result_own_outgoing_response_error_code_t;

typedef wasi_io_streams_own_input_stream_t wasi_http_types_own_input_stream_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_own_input_stream_t ok;
  } val;
} wasi_http_types_result_own_input_stream_void_t;

typedef wasi_io_poll_own_pollable_t wasi_http_types_own_pollable_t;

typedef wasi_http_types_own_fields_t wasi_http_types_own_trailers_t;

typedef struct {
  bool is_some;
  wasi_http_types_own_trailers_t val;
} wasi_http_types_option_own_trailers_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_option_own_trailers_t ok;
    wasi_http_types_error_code_t err;
  } val;
} wasi_http_types_result_option_own_trailers_error_code_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_result_option_own_trailers_error_code_t ok;
  } val;
} wasi_http_types_result_result_option_own_trailers_error_code_void_t;

typedef struct {
  bool is_some;
  wasi_http_types_result_result_option_own_trailers_error_code_void_t val;
} wasi_http_types_option_result_result_option_own_trailers_error_code_void_t;

typedef wasi_io_streams_own_output_stream_t wasi_http_types_own_output_stream_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_own_output_stream_t ok;
  } val;
} wasi_http_types_result_own_output_stream_void_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_error_code_t err;
  } val;
} wasi_http_types_result_void_error_code_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_own_incoming_response_t ok;
    wasi_http_types_error_code_t err;
  } val;
} wasi_http_types_result_own_incoming_response_error_code_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_result_own_incoming_response_error_code_t ok;
  } val;
} wasi_http_types_result_result_own_incoming_response_error_code_void_t;

typedef struct {
  bool is_some;
  wasi_http_types_result_result_own_incoming_response_error_code_void_t val;
} wasi_http_types_option_result_result_own_incoming_response_error_code_void_t;

typedef wasi_http_types_own_incoming_request_t exports_wasi_http_incoming_handler_own_incoming_request_t;

typedef wasi_http_types_own_response_outparam_t exports_wasi_http_incoming_handler_own_response_outparam_t;

// Imported Functions from `wasmcloud:couchbase/types@0.1.0-draft`
// Construct an empty document value (a dictionary, by default)
extern wasmcloud_couchbase_types_own_document_value_t wasmcloud_couchbase_types_constructor_document_value(void);
// Convert this JSON value into a string
extern void wasmcloud_couchbase_types_method_document_value_to_string(wasmcloud_couchbase_types_borrow_document_value_t self, hello_string_t *ret);
// Build a document-value from a stringified JSON value
extern void wasmcloud_couchbase_types_static_document_value_from_json(hello_string_t *json, wasmcloud_couchbase_types_result_own_document_value_document_value_create_error_t *ret);

// Imported Functions from `wasmcloud:couchbase/document@0.1.0-draft`
// Insert a document with a new ID
extern void wasmcloud_couchbase_document_insert(wasmcloud_couchbase_document_document_id_t *id, wasmcloud_couchbase_document_document_t *doc, wasmcloud_couchbase_document_option_document_insert_options_t *options, wasmcloud_couchbase_document_result_mutation_metadata_document_error_t *ret);
// Replace a document with the given ID with a new document
extern void wasmcloud_couchbase_document_replace(wasmcloud_couchbase_document_document_id_t *id, wasmcloud_couchbase_document_document_t *doc, wasmcloud_couchbase_document_option_document_replace_options_t *options, wasmcloud_couchbase_document_result_mutation_metadata_document_error_t *ret);
// Create or update (replace) an existing document with the given ID
extern void wasmcloud_couchbase_document_upsert(wasmcloud_couchbase_document_document_id_t *id, wasmcloud_couchbase_document_document_t *doc, wasmcloud_couchbase_document_option_document_upsert_options_t *options, wasmcloud_couchbase_document_result_mutation_metadata_document_error_t *ret);
// Retrieve a document by ID
extern void wasmcloud_couchbase_document_get(wasmcloud_couchbase_document_document_id_t *id, wasmcloud_couchbase_document_option_document_get_options_t *options, wasmcloud_couchbase_document_result_document_get_result_document_error_t *ret);
// Retrieve a document by ID from any replica
extern void wasmcloud_couchbase_document_get_any_repliacs(wasmcloud_couchbase_document_document_id_t *id, wasmcloud_couchbase_document_option_document_get_any_replica_options_t *options, wasmcloud_couchbase_document_result_document_get_replica_result_document_error_t *ret);
// Retrieve a document by ID from all replicas
extern void wasmcloud_couchbase_document_get_all_replicas(wasmcloud_couchbase_document_document_id_t *id, wasmcloud_couchbase_document_option_document_get_all_replica_options_t *options, wasmcloud_couchbase_document_result_list_document_get_replica_result_document_error_t *ret);
// Remove a document by ID
extern void wasmcloud_couchbase_document_remove(wasmcloud_couchbase_document_document_id_t *id, wasmcloud_couchbase_document_option_document_remove_options_t *options, wasmcloud_couchbase_document_result_mutation_metadata_document_error_t *ret);
// Retrieve and Lock a document by ID
extern void wasmcloud_couchbase_document_get_and_lock(wasmcloud_couchbase_document_document_id_t *id, wasmcloud_couchbase_document_option_document_get_and_lock_options_t *options, wasmcloud_couchbase_document_result_document_get_result_document_error_t *ret);
// Retrieve and Lock a document by ID
extern void wasmcloud_couchbase_document_unlock(wasmcloud_couchbase_document_document_id_t *id, wasmcloud_couchbase_document_option_document_unlock_options_t *options, wasmcloud_couchbase_document_result_void_document_error_t *ret);
// Retrieve and Lock a document by ID
extern void wasmcloud_couchbase_document_touch(wasmcloud_couchbase_document_document_id_t *id, wasmcloud_couchbase_document_option_document_touch_options_t *options, wasmcloud_couchbase_document_result_mutation_metadata_document_error_t *ret);
// Retrieve and Touch a document by ID
extern void wasmcloud_couchbase_document_get_and_touch(wasmcloud_couchbase_document_document_id_t *id, wasmcloud_couchbase_document_option_document_get_and_touch_options_t *options, wasmcloud_couchbase_document_result_document_get_result_document_error_t *ret);

// Imported Functions from `wasi:io/poll@0.2.0`
// Return the readiness of a pollable. This function never blocks.
// 
// Returns `true` when the pollable is ready, and `false` otherwise.
extern bool wasi_io_poll_method_pollable_ready(wasi_io_poll_borrow_pollable_t self);
// `block` returns immediately if the pollable is ready, and otherwise
// blocks until ready.
// 
// This function is equivalent to calling `poll.poll` on a list
// containing only this pollable.
extern void wasi_io_poll_method_pollable_block(wasi_io_poll_borrow_pollable_t self);
// Poll for completion on a set of pollables.
// 
// This function takes a list of pollables, which identify I/O sources of
// interest, and waits until one or more of the events is ready for I/O.
// 
// The result `list<u32>` contains one or more indices of handles in the
// argument list that is ready for I/O.
// 
// If the list contains more elements than can be indexed with a `u32`
// value, this function traps.
// 
// A timeout can be implemented by adding a pollable from the
// wasi-clocks API to the list.
// 
// This function does not return a `result`; polling in itself does not
// do any I/O so it doesn't fail. If any of the I/O sources identified by
// the pollables has an error, it is indicated by marking the source as
// being reaedy for I/O.
extern void wasi_io_poll_poll(wasi_io_poll_list_borrow_pollable_t *in, hello_list_u32_t *ret);

// Imported Functions from `wasi:clocks/monotonic-clock@0.2.0`
// Read the current value of the clock.
// 
// The clock is monotonic, therefore calling this function repeatedly will
// produce a sequence of non-decreasing values.
extern wasi_clocks_monotonic_clock_instant_t wasi_clocks_monotonic_clock_now(void);
// Query the resolution of the clock. Returns the duration of time
// corresponding to a clock tick.
extern wasi_clocks_monotonic_clock_duration_t wasi_clocks_monotonic_clock_resolution(void);
// Create a `pollable` which will resolve once the specified instant
// occured.
extern wasi_clocks_monotonic_clock_own_pollable_t wasi_clocks_monotonic_clock_subscribe_instant(wasi_clocks_monotonic_clock_instant_t when);
// Create a `pollable` which will resolve once the given duration has
// elapsed, starting at the time at which this function was called.
// occured.
extern wasi_clocks_monotonic_clock_own_pollable_t wasi_clocks_monotonic_clock_subscribe_duration(wasi_clocks_monotonic_clock_duration_t when);

// Imported Functions from `wasi:io/error@0.2.0`
// Returns a string that is suitable to assist humans in debugging
// this error.
// 
// WARNING: The returned string should not be consumed mechanically!
// It may change across platforms, hosts, or other implementation
// details. Parsing this string is a major platform-compatibility
// hazard.
extern void wasi_io_error_method_error_to_debug_string(wasi_io_error_borrow_error_t self, hello_string_t *ret);

// Imported Functions from `wasi:io/streams@0.2.0`
// Perform a non-blocking read from the stream.
// 
// When the source of a `read` is binary data, the bytes from the source
// are returned verbatim. When the source of a `read` is known to the
// implementation to be text, bytes containing the UTF-8 encoding of the
// text are returned.
// 
// This function returns a list of bytes containing the read data,
// when successful. The returned list will contain up to `len` bytes;
// it may return fewer than requested, but not more. The list is
// empty when no bytes are available for reading at this time. The
// pollable given by `subscribe` will be ready when more bytes are
// available.
// 
// This function fails with a `stream-error` when the operation
// encounters an error, giving `last-operation-failed`, or when the
// stream is closed, giving `closed`.
// 
// When the caller gives a `len` of 0, it represents a request to
// read 0 bytes. If the stream is still open, this call should
// succeed and return an empty list, or otherwise fail with `closed`.
// 
// The `len` parameter is a `u64`, which could represent a list of u8 which
// is not possible to allocate in wasm32, or not desirable to allocate as
// as a return value by the callee. The callee may return a list of bytes
// less than `len` in size while more bytes are available for reading.
extern void wasi_io_streams_method_input_stream_read(wasi_io_streams_borrow_input_stream_t self, uint64_t len, wasi_io_streams_result_list_u8_stream_error_t *ret);
// Read bytes from a stream, after blocking until at least one byte can
// be read. Except for blocking, behavior is identical to `read`.
extern void wasi_io_streams_method_input_stream_blocking_read(wasi_io_streams_borrow_input_stream_t self, uint64_t len, wasi_io_streams_result_list_u8_stream_error_t *ret);
// Skip bytes from a stream. Returns number of bytes skipped.
// 
// Behaves identical to `read`, except instead of returning a list
// of bytes, returns the number of bytes consumed from the stream.
extern void wasi_io_streams_method_input_stream_skip(wasi_io_streams_borrow_input_stream_t self, uint64_t len, wasi_io_streams_result_u64_stream_error_t *ret);
// Skip bytes from a stream, after blocking until at least one byte
// can be skipped. Except for blocking behavior, identical to `skip`.
extern void wasi_io_streams_method_input_stream_blocking_skip(wasi_io_streams_borrow_input_stream_t self, uint64_t len, wasi_io_streams_result_u64_stream_error_t *ret);
// Create a `pollable` which will resolve once either the specified stream
// has bytes available to read or the other end of the stream has been
// closed.
// The created `pollable` is a child resource of the `input-stream`.
// Implementations may trap if the `input-stream` is dropped before
// all derived `pollable`s created with this function are dropped.
extern wasi_io_streams_own_pollable_t wasi_io_streams_method_input_stream_subscribe(wasi_io_streams_borrow_input_stream_t self);
// Check readiness for writing. This function never blocks.
// 
// Returns the number of bytes permitted for the next call to `write`,
// or an error. Calling `write` with more bytes than this function has
// permitted will trap.
// 
// When this function returns 0 bytes, the `subscribe` pollable will
// become ready when this function will report at least 1 byte, or an
// error.
extern void wasi_io_streams_method_output_stream_check_write(wasi_io_streams_borrow_output_stream_t self, wasi_io_streams_result_u64_stream_error_t *ret);
// Perform a write. This function never blocks.
// 
// When the destination of a `write` is binary data, the bytes from
// `contents` are written verbatim. When the destination of a `write` is
// known to the implementation to be text, the bytes of `contents` are
// transcoded from UTF-8 into the encoding of the destination and then
// written.
// 
// Precondition: check-write gave permit of Ok(n) and contents has a
// length of less than or equal to n. Otherwise, this function will trap.
// 
// returns Err(closed) without writing if the stream has closed since
// the last call to check-write provided a permit.
extern void wasi_io_streams_method_output_stream_write(wasi_io_streams_borrow_output_stream_t self, hello_list_u8_t *contents, wasi_io_streams_result_void_stream_error_t *ret);
// Perform a write of up to 4096 bytes, and then flush the stream. Block
// until all of these operations are complete, or an error occurs.
// 
// This is a convenience wrapper around the use of `check-write`,
// `subscribe`, `write`, and `flush`, and is implemented with the
// following pseudo-code:
// 
// ```text
// let pollable = this.subscribe();
// while !contents.is_empty() {
// // Wait for the stream to become writable
// pollable.block();
// let Ok(n) = this.check-write(); // eliding error handling
// let len = min(n, contents.len());
// let (chunk, rest) = contents.split_at(len);
// this.write(chunk  );            // eliding error handling
// contents = rest;
// }
// this.flush();
// // Wait for completion of `flush`
// pollable.block();
// // Check for any errors that arose during `flush`
// let _ = this.check-write();         // eliding error handling
// ```
extern void wasi_io_streams_method_output_stream_blocking_write_and_flush(wasi_io_streams_borrow_output_stream_t self, hello_list_u8_t *contents, wasi_io_streams_result_void_stream_error_t *ret);
// Request to flush buffered output. This function never blocks.
// 
// This tells the output-stream that the caller intends any buffered
// output to be flushed. the output which is expected to be flushed
// is all that has been passed to `write` prior to this call.
// 
// Upon calling this function, the `output-stream` will not accept any
// writes (`check-write` will return `ok(0)`) until the flush has
// completed. The `subscribe` pollable will become ready when the
// flush has completed and the stream can accept more writes.
extern void wasi_io_streams_method_output_stream_flush(wasi_io_streams_borrow_output_stream_t self, wasi_io_streams_result_void_stream_error_t *ret);
// Request to flush buffered output, and block until flush completes
// and stream is ready for writing again.
extern void wasi_io_streams_method_output_stream_blocking_flush(wasi_io_streams_borrow_output_stream_t self, wasi_io_streams_result_void_stream_error_t *ret);
// Create a `pollable` which will resolve once the output-stream
// is ready for more writing, or an error has occured. When this
// pollable is ready, `check-write` will return `ok(n)` with n>0, or an
// error.
// 
// If the stream is closed, this pollable is always ready immediately.
// 
// The created `pollable` is a child resource of the `output-stream`.
// Implementations may trap if the `output-stream` is dropped before
// all derived `pollable`s created with this function are dropped.
extern wasi_io_streams_own_pollable_t wasi_io_streams_method_output_stream_subscribe(wasi_io_streams_borrow_output_stream_t self);
// Write zeroes to a stream.
// 
// This should be used precisely like `write` with the exact same
// preconditions (must use check-write first), but instead of
// passing a list of bytes, you simply pass the number of zero-bytes
// that should be written.
extern void wasi_io_streams_method_output_stream_write_zeroes(wasi_io_streams_borrow_output_stream_t self, uint64_t len, wasi_io_streams_result_void_stream_error_t *ret);
// Perform a write of up to 4096 zeroes, and then flush the stream.
// Block until all of these operations are complete, or an error
// occurs.
// 
// This is a convenience wrapper around the use of `check-write`,
// `subscribe`, `write-zeroes`, and `flush`, and is implemented with
// the following pseudo-code:
// 
// ```text
// let pollable = this.subscribe();
// while num_zeroes != 0 {
// // Wait for the stream to become writable
// pollable.block();
// let Ok(n) = this.check-write(); // eliding error handling
// let len = min(n, num_zeroes);
// this.write-zeroes(len);         // eliding error handling
// num_zeroes -= len;
// }
// this.flush();
// // Wait for completion of `flush`
// pollable.block();
// // Check for any errors that arose during `flush`
// let _ = this.check-write();         // eliding error handling
// ```
extern void wasi_io_streams_method_output_stream_blocking_write_zeroes_and_flush(wasi_io_streams_borrow_output_stream_t self, uint64_t len, wasi_io_streams_result_void_stream_error_t *ret);
// Read from one stream and write to another.
// 
// The behavior of splice is equivelant to:
// 1. calling `check-write` on the `output-stream`
// 2. calling `read` on the `input-stream` with the smaller of the
// `check-write` permitted length and the `len` provided to `splice`
// 3. calling `write` on the `output-stream` with that read data.
// 
// Any error reported by the call to `check-write`, `read`, or
// `write` ends the splice and reports that error.
// 
// This function returns the number of bytes transferred; it may be less
// than `len`.
extern void wasi_io_streams_method_output_stream_splice(wasi_io_streams_borrow_output_stream_t self, wasi_io_streams_borrow_input_stream_t src, uint64_t len, wasi_io_streams_result_u64_stream_error_t *ret);
// Read from one stream and write to another, with blocking.
// 
// This is similar to `splice`, except that it blocks until the
// `output-stream` is ready for writing, and the `input-stream`
// is ready for reading, before performing the `splice`.
extern void wasi_io_streams_method_output_stream_blocking_splice(wasi_io_streams_borrow_output_stream_t self, wasi_io_streams_borrow_input_stream_t src, uint64_t len, wasi_io_streams_result_u64_stream_error_t *ret);

// Imported Functions from `wasi:http/types@0.2.0`
// Attempts to extract a http-related `error` from the wasi:io `error`
// provided.
// 
// Stream operations which return
// `wasi:io/stream/stream-error::last-operation-failed` have a payload of
// type `wasi:io/error/error` with more information about the operation
// that failed. This payload can be passed through to this function to see
// if there's http-related information about the error to return.
// 
// Note that this function is fallible because not all io-errors are
// http-related errors.
extern void wasi_http_types_http_error_code(wasi_http_types_borrow_io_error_t err_, wasi_http_types_option_error_code_t *ret);
// Construct an empty HTTP Fields.
// 
// The resulting `fields` is mutable.
extern wasi_http_types_own_fields_t wasi_http_types_constructor_fields(void);
// Construct an HTTP Fields.
// 
// The resulting `fields` is mutable.
// 
// The list represents each key-value pair in the Fields. Keys
// which have multiple values are represented by multiple entries in this
// list with the same key.
// 
// The tuple is a pair of the field key, represented as a string, and
// Value, represented as a list of bytes. In a valid Fields, all keys
// and values are valid UTF-8 strings. However, values are not always
// well-formed, so they are represented as a raw list of bytes.
// 
// An error result will be returned if any header or value was
// syntactically invalid, or if a header was forbidden.
extern void wasi_http_types_static_fields_from_list(hello_list_tuple2_field_key_field_value_t *entries, wasi_http_types_result_own_fields_header_error_t *ret);
// Get all of the values corresponding to a key. If the key is not present
// in this `fields`, an empty list is returned. However, if the key is
// present but empty, this is represented by a list with one or more
// empty field-values present.
extern void wasi_http_types_method_fields_get(wasi_http_types_borrow_fields_t self, wasi_http_types_field_key_t *name, hello_list_field_value_t *ret);
// Returns `true` when the key is present in this `fields`. If the key is
// syntactically invalid, `false` is returned.
extern bool wasi_http_types_method_fields_has(wasi_http_types_borrow_fields_t self, wasi_http_types_field_key_t *name);
// Set all of the values for a key. Clears any existing values for that
// key, if they have been set.
// 
// Fails with `header-error.immutable` if the `fields` are immutable.
extern void wasi_http_types_method_fields_set(wasi_http_types_borrow_fields_t self, wasi_http_types_field_key_t *name, hello_list_field_value_t *value, wasi_http_types_result_void_header_error_t *ret);
// Delete all values for a key. Does nothing if no values for the key
// exist.
// 
// Fails with `header-error.immutable` if the `fields` are immutable.
extern void wasi_http_types_method_fields_delete(wasi_http_types_borrow_fields_t self, wasi_http_types_field_key_t *name, wasi_http_types_result_void_header_error_t *ret);
// Append a value for a key. Does not change or delete any existing
// values for that key.
// 
// Fails with `header-error.immutable` if the `fields` are immutable.
extern void wasi_http_types_method_fields_append(wasi_http_types_borrow_fields_t self, wasi_http_types_field_key_t *name, wasi_http_types_field_value_t *value, wasi_http_types_result_void_header_error_t *ret);
// Retrieve the full set of keys and values in the Fields. Like the
// constructor, the list represents each key-value pair.
// 
// The outer list represents each key-value pair in the Fields. Keys
// which have multiple values are represented by multiple entries in this
// list with the same key.
extern void wasi_http_types_method_fields_entries(wasi_http_types_borrow_fields_t self, hello_list_tuple2_field_key_field_value_t *ret);
// Make a deep copy of the Fields. Equivelant in behavior to calling the
// `fields` constructor on the return value of `entries`. The resulting
// `fields` is mutable.
extern wasi_http_types_own_fields_t wasi_http_types_method_fields_clone(wasi_http_types_borrow_fields_t self);
// Returns the method of the incoming request.
extern void wasi_http_types_method_incoming_request_method(wasi_http_types_borrow_incoming_request_t self, wasi_http_types_method_t *ret);
// Returns the path with query parameters from the request, as a string.
extern void wasi_http_types_method_incoming_request_path_with_query(wasi_http_types_borrow_incoming_request_t self, hello_option_string_t *ret);
// Returns the protocol scheme from the request.
extern void wasi_http_types_method_incoming_request_scheme(wasi_http_types_borrow_incoming_request_t self, wasi_http_types_option_scheme_t *ret);
// Returns the authority from the request, if it was present.
extern void wasi_http_types_method_incoming_request_authority(wasi_http_types_borrow_incoming_request_t self, hello_option_string_t *ret);
// Get the `headers` associated with the request.
// 
// The returned `headers` resource is immutable: `set`, `append`, and
// `delete` operations will fail with `header-error.immutable`.
// 
// The `headers` returned are a child resource: it must be dropped before
// the parent `incoming-request` is dropped. Dropping this
// `incoming-request` before all children are dropped will trap.
extern wasi_http_types_own_headers_t wasi_http_types_method_incoming_request_headers(wasi_http_types_borrow_incoming_request_t self);
// Gives the `incoming-body` associated with this request. Will only
// return success at most once, and subsequent calls will return error.
extern void wasi_http_types_method_incoming_request_consume(wasi_http_types_borrow_incoming_request_t self, wasi_http_types_result_own_incoming_body_void_t *ret);
// Construct a new `outgoing-request` with a default `method` of `GET`, and
// `none` values for `path-with-query`, `scheme`, and `authority`.
// 
// * `headers` is the HTTP Headers for the Request.
// 
// It is possible to construct, or manipulate with the accessor functions
// below, an `outgoing-request` with an invalid combination of `scheme`
// and `authority`, or `headers` which are not permitted to be sent.
// It is the obligation of the `outgoing-handler.handle` implementation
// to reject invalid constructions of `outgoing-request`.
extern wasi_http_types_own_outgoing_request_t wasi_http_types_constructor_outgoing_request(wasi_http_types_own_headers_t headers);
// Returns the resource corresponding to the outgoing Body for this
// Request.
// 
// Returns success on the first call: the `outgoing-body` resource for
// this `outgoing-request` can be retrieved at most once. Subsequent
// calls will return error.
extern void wasi_http_types_method_outgoing_request_body(wasi_http_types_borrow_outgoing_request_t self, wasi_http_types_result_own_outgoing_body_void_t *ret);
// Get the Method for the Request.
extern void wasi_http_types_method_outgoing_request_method(wasi_http_types_borrow_outgoing_request_t self, wasi_http_types_method_t *ret);
// Set the Method for the Request. Fails if the string present in a
// `method.other` argument is not a syntactically valid method.
extern void wasi_http_types_method_outgoing_request_set_method(wasi_http_types_borrow_outgoing_request_t self, wasi_http_types_method_t *method, wasi_http_types_result_void_void_t *ret);
// Get the combination of the HTTP Path and Query for the Request.
// When `none`, this represents an empty Path and empty Query.
extern void wasi_http_types_method_outgoing_request_path_with_query(wasi_http_types_borrow_outgoing_request_t self, hello_option_string_t *ret);
// Set the combination of the HTTP Path and Query for the Request.
// When `none`, this represents an empty Path and empty Query. Fails is the
// string given is not a syntactically valid path and query uri component.
extern void wasi_http_types_method_outgoing_request_set_path_with_query(wasi_http_types_borrow_outgoing_request_t self, hello_option_string_t *path_with_query, wasi_http_types_result_void_void_t *ret);
// Get the HTTP Related Scheme for the Request. When `none`, the
// implementation may choose an appropriate default scheme.
extern void wasi_http_types_method_outgoing_request_scheme(wasi_http_types_borrow_outgoing_request_t self, wasi_http_types_option_scheme_t *ret);
// Set the HTTP Related Scheme for the Request. When `none`, the
// implementation may choose an appropriate default scheme. Fails if the
// string given is not a syntactically valid uri scheme.
extern void wasi_http_types_method_outgoing_request_set_scheme(wasi_http_types_borrow_outgoing_request_t self, wasi_http_types_option_scheme_t *scheme, wasi_http_types_result_void_void_t *ret);
// Get the HTTP Authority for the Request. A value of `none` may be used
// with Related Schemes which do not require an Authority. The HTTP and
// HTTPS schemes always require an authority.
extern void wasi_http_types_method_outgoing_request_authority(wasi_http_types_borrow_outgoing_request_t self, hello_option_string_t *ret);
// Set the HTTP Authority for the Request. A value of `none` may be used
// with Related Schemes which do not require an Authority. The HTTP and
// HTTPS schemes always require an authority. Fails if the string given is
// not a syntactically valid uri authority.
extern void wasi_http_types_method_outgoing_request_set_authority(wasi_http_types_borrow_outgoing_request_t self, hello_option_string_t *authority, wasi_http_types_result_void_void_t *ret);
// Get the headers associated with the Request.
// 
// The returned `headers` resource is immutable: `set`, `append`, and
// `delete` operations will fail with `header-error.immutable`.
// 
// This headers resource is a child: it must be dropped before the parent
// `outgoing-request` is dropped, or its ownership is transfered to
// another component by e.g. `outgoing-handler.handle`.
extern wasi_http_types_own_headers_t wasi_http_types_method_outgoing_request_headers(wasi_http_types_borrow_outgoing_request_t self);
// Construct a default `request-options` value.
extern wasi_http_types_own_request_options_t wasi_http_types_constructor_request_options(void);
// The timeout for the initial connect to the HTTP Server.
extern void wasi_http_types_method_request_options_connect_timeout(wasi_http_types_borrow_request_options_t self, hello_option_duration_t *ret);
// Set the timeout for the initial connect to the HTTP Server. An error
// return value indicates that this timeout is not supported.
extern void wasi_http_types_method_request_options_set_connect_timeout(wasi_http_types_borrow_request_options_t self, hello_option_duration_t *duration, wasi_http_types_result_void_void_t *ret);
// The timeout for receiving the first byte of the Response body.
extern void wasi_http_types_method_request_options_first_byte_timeout(wasi_http_types_borrow_request_options_t self, hello_option_duration_t *ret);
// Set the timeout for receiving the first byte of the Response body. An
// error return value indicates that this timeout is not supported.
extern void wasi_http_types_method_request_options_set_first_byte_timeout(wasi_http_types_borrow_request_options_t self, hello_option_duration_t *duration, wasi_http_types_result_void_void_t *ret);
// The timeout for receiving subsequent chunks of bytes in the Response
// body stream.
extern void wasi_http_types_method_request_options_between_bytes_timeout(wasi_http_types_borrow_request_options_t self, hello_option_duration_t *ret);
// Set the timeout for receiving subsequent chunks of bytes in the Response
// body stream. An error return value indicates that this timeout is not
// supported.
extern void wasi_http_types_method_request_options_set_between_bytes_timeout(wasi_http_types_borrow_request_options_t self, hello_option_duration_t *duration, wasi_http_types_result_void_void_t *ret);
// Set the value of the `response-outparam` to either send a response,
// or indicate an error.
// 
// This method consumes the `response-outparam` to ensure that it is
// called at most once. If it is never called, the implementation
// will respond with an error.
// 
// The user may provide an `error` to `response` to allow the
// implementation determine how to respond with an HTTP error response.
extern void wasi_http_types_static_response_outparam_set(wasi_http_types_own_response_outparam_t param, wasi_http_types_result_own_outgoing_response_error_code_t *response);
// Returns the status code from the incoming response.
extern wasi_http_types_status_code_t wasi_http_types_method_incoming_response_status(wasi_http_types_borrow_incoming_response_t self);
// Returns the headers from the incoming response.
// 
// The returned `headers` resource is immutable: `set`, `append`, and
// `delete` operations will fail with `header-error.immutable`.
// 
// This headers resource is a child: it must be dropped before the parent
// `incoming-response` is dropped.
extern wasi_http_types_own_headers_t wasi_http_types_method_incoming_response_headers(wasi_http_types_borrow_incoming_response_t self);
// Returns the incoming body. May be called at most once. Returns error
// if called additional times.
extern void wasi_http_types_method_incoming_response_consume(wasi_http_types_borrow_incoming_response_t self, wasi_http_types_result_own_incoming_body_void_t *ret);
// Returns the contents of the body, as a stream of bytes.
// 
// Returns success on first call: the stream representing the contents
// can be retrieved at most once. Subsequent calls will return error.
// 
// The returned `input-stream` resource is a child: it must be dropped
// before the parent `incoming-body` is dropped, or consumed by
// `incoming-body.finish`.
// 
// This invariant ensures that the implementation can determine whether
// the user is consuming the contents of the body, waiting on the
// `future-trailers` to be ready, or neither. This allows for network
// backpressure is to be applied when the user is consuming the body,
// and for that backpressure to not inhibit delivery of the trailers if
// the user does not read the entire body.
extern void wasi_http_types_method_incoming_body_stream(wasi_http_types_borrow_incoming_body_t self, wasi_http_types_result_own_input_stream_void_t *ret);
// Takes ownership of `incoming-body`, and returns a `future-trailers`.
// This function will trap if the `input-stream` child is still alive.
extern wasi_http_types_own_future_trailers_t wasi_http_types_static_incoming_body_finish(wasi_http_types_own_incoming_body_t this_);
// Returns a pollable which becomes ready when either the trailers have
// been received, or an error has occured. When this pollable is ready,
// the `get` method will return `some`.
extern wasi_http_types_own_pollable_t wasi_http_types_method_future_trailers_subscribe(wasi_http_types_borrow_future_trailers_t self);
// Returns the contents of the trailers, or an error which occured,
// once the future is ready.
// 
// The outer `option` represents future readiness. Users can wait on this
// `option` to become `some` using the `subscribe` method.
// 
// The outer `result` is used to retrieve the trailers or error at most
// once. It will be success on the first call in which the outer option
// is `some`, and error on subsequent calls.
// 
// The inner `result` represents that either the HTTP Request or Response
// body, as well as any trailers, were received successfully, or that an
// error occured receiving them. The optional `trailers` indicates whether
// or not trailers were present in the body.
// 
// When some `trailers` are returned by this method, the `trailers`
// resource is immutable, and a child. Use of the `set`, `append`, or
// `delete` methods will return an error, and the resource must be
// dropped before the parent `future-trailers` is dropped.
extern void wasi_http_types_method_future_trailers_get(wasi_http_types_borrow_future_trailers_t self, wasi_http_types_option_result_result_option_own_trailers_error_code_void_t *ret);
// Construct an `outgoing-response`, with a default `status-code` of `200`.
// If a different `status-code` is needed, it must be set via the
// `set-status-code` method.
// 
// * `headers` is the HTTP Headers for the Response.
extern wasi_http_types_own_outgoing_response_t wasi_http_types_constructor_outgoing_response(wasi_http_types_own_headers_t headers);
// Get the HTTP Status Code for the Response.
extern wasi_http_types_status_code_t wasi_http_types_method_outgoing_response_status_code(wasi_http_types_borrow_outgoing_response_t self);
// Set the HTTP Status Code for the Response. Fails if the status-code
// given is not a valid http status code.
extern void wasi_http_types_method_outgoing_response_set_status_code(wasi_http_types_borrow_outgoing_response_t self, wasi_http_types_status_code_t status_code, wasi_http_types_result_void_void_t *ret);
// Get the headers associated with the Request.
// 
// The returned `headers` resource is immutable: `set`, `append`, and
// `delete` operations will fail with `header-error.immutable`.
// 
// This headers resource is a child: it must be dropped before the parent
// `outgoing-request` is dropped, or its ownership is transfered to
// another component by e.g. `outgoing-handler.handle`.
extern wasi_http_types_own_headers_t wasi_http_types_method_outgoing_response_headers(wasi_http_types_borrow_outgoing_response_t self);
// Returns the resource corresponding to the outgoing Body for this Response.
// 
// Returns success on the first call: the `outgoing-body` resource for
// this `outgoing-response` can be retrieved at most once. Subsequent
// calls will return error.
extern void wasi_http_types_method_outgoing_response_body(wasi_http_types_borrow_outgoing_response_t self, wasi_http_types_result_own_outgoing_body_void_t *ret);
// Returns a stream for writing the body contents.
// 
// The returned `output-stream` is a child resource: it must be dropped
// before the parent `outgoing-body` resource is dropped (or finished),
// otherwise the `outgoing-body` drop or `finish` will trap.
// 
// Returns success on the first call: the `output-stream` resource for
// this `outgoing-body` may be retrieved at most once. Subsequent calls
// will return error.
extern void wasi_http_types_method_outgoing_body_write(wasi_http_types_borrow_outgoing_body_t self, wasi_http_types_result_own_output_stream_void_t *ret);
// Finalize an outgoing body, optionally providing trailers. This must be
// called to signal that the response is complete. If the `outgoing-body`
// is dropped without calling `outgoing-body.finalize`, the implementation
// should treat the body as corrupted.
// 
// Fails if the body's `outgoing-request` or `outgoing-response` was
// constructed with a Content-Length header, and the contents written
// to the body (via `write`) does not match the value given in the
// Content-Length.
extern void wasi_http_types_static_outgoing_body_finish(wasi_http_types_own_outgoing_body_t this_, wasi_http_types_option_own_trailers_t *trailers, wasi_http_types_result_void_error_code_t *ret);
// Returns a pollable which becomes ready when either the Response has
// been received, or an error has occured. When this pollable is ready,
// the `get` method will return `some`.
extern wasi_http_types_own_pollable_t wasi_http_types_method_future_incoming_response_subscribe(wasi_http_types_borrow_future_incoming_response_t self);
// Returns the incoming HTTP Response, or an error, once one is ready.
// 
// The outer `option` represents future readiness. Users can wait on this
// `option` to become `some` using the `subscribe` method.
// 
// The outer `result` is used to retrieve the response or error at most
// once. It will be success on the first call in which the outer option
// is `some`, and error on subsequent calls.
// 
// The inner `result` represents that either the incoming HTTP Response
// status and headers have recieved successfully, or that an error
// occured. Errors may also occur while consuming the response body,
// but those will be reported by the `incoming-body` and its
// `output-stream` child.
extern void wasi_http_types_method_future_incoming_response_get(wasi_http_types_borrow_future_incoming_response_t self, wasi_http_types_option_result_result_own_incoming_response_error_code_void_t *ret);

// Exported Functions from `wasi:http/incoming-handler@0.2.0`
void exports_wasi_http_incoming_handler_handle(exports_wasi_http_incoming_handler_own_incoming_request_t request, exports_wasi_http_incoming_handler_own_response_outparam_t response_out);

// Helper Functions

void wasmcloud_couchbase_types_document_id_free(wasmcloud_couchbase_types_document_id_t *ptr);

void wasmcloud_couchbase_types_subdocument_path_free(wasmcloud_couchbase_types_subdocument_path_t *ptr);

void wasmcloud_couchbase_types_request_span_free(wasmcloud_couchbase_types_request_span_t *ptr);

void wasmcloud_couchbase_types_json_string_free(wasmcloud_couchbase_types_json_string_t *ptr);

void wasmcloud_couchbase_types_document_field_name_free(wasmcloud_couchbase_types_document_field_name_t *ptr);

void wasmcloud_couchbase_types_collection_name_free(wasmcloud_couchbase_types_collection_name_t *ptr);

void wasmcloud_couchbase_types_bucket_name_free(wasmcloud_couchbase_types_bucket_name_t *ptr);

void wasmcloud_couchbase_types_search_index_name_free(wasmcloud_couchbase_types_search_index_name_t *ptr);

void hello_option_string_free(hello_option_string_t *ptr);

void wasmcloud_couchbase_types_collection_free(wasmcloud_couchbase_types_collection_t *ptr);

void wasmcloud_couchbase_types_document_error_free(wasmcloud_couchbase_types_document_error_t *ptr);

void wasmcloud_couchbase_types_document_value_create_error_free(wasmcloud_couchbase_types_document_value_create_error_t *ptr);

extern void wasmcloud_couchbase_types_document_value_drop_own(wasmcloud_couchbase_types_own_document_value_t handle);

extern wasmcloud_couchbase_types_borrow_document_value_t wasmcloud_couchbase_types_borrow_document_value(wasmcloud_couchbase_types_own_document_value_t handle);

void wasmcloud_couchbase_types_document_free(wasmcloud_couchbase_types_document_t *ptr);

void wasmcloud_couchbase_types_bucket_error_free(wasmcloud_couchbase_types_bucket_error_t *ptr);

void wasmcloud_couchbase_types_mutation_metadata_free(wasmcloud_couchbase_types_mutation_metadata_t *ptr);

void wasmcloud_couchbase_types_retry_strategy_free(wasmcloud_couchbase_types_retry_strategy_t *ptr);

void wasmcloud_couchbase_types_mutation_token_free(wasmcloud_couchbase_types_mutation_token_t *ptr);

void wasmcloud_couchbase_types_list_mutation_token_free(wasmcloud_couchbase_types_list_mutation_token_t *ptr);

void wasmcloud_couchbase_types_mutation_state_free(wasmcloud_couchbase_types_mutation_state_t *ptr);

void wasmcloud_couchbase_types_result_own_document_value_document_value_create_error_free(wasmcloud_couchbase_types_result_own_document_value_document_value_create_error_t *ptr);

void wasmcloud_couchbase_document_document_free(wasmcloud_couchbase_document_document_t *ptr);

void wasmcloud_couchbase_document_document_id_free(wasmcloud_couchbase_document_document_id_t *ptr);

void wasmcloud_couchbase_document_document_error_free(wasmcloud_couchbase_document_document_error_t *ptr);

void wasmcloud_couchbase_document_mutation_metadata_free(wasmcloud_couchbase_document_mutation_metadata_t *ptr);

void wasmcloud_couchbase_document_retry_strategy_free(wasmcloud_couchbase_document_retry_strategy_t *ptr);

void wasmcloud_couchbase_document_request_span_free(wasmcloud_couchbase_document_request_span_t *ptr);

void hello_option_u64_free(hello_option_u64_t *ptr);

void wasmcloud_couchbase_document_option_retry_strategy_free(wasmcloud_couchbase_document_option_retry_strategy_t *ptr);

void hello_option_request_span_free(hello_option_request_span_t *ptr);

void wasmcloud_couchbase_document_document_insert_options_free(wasmcloud_couchbase_document_document_insert_options_t *ptr);

void wasmcloud_couchbase_document_document_replace_options_free(wasmcloud_couchbase_document_document_replace_options_t *ptr);

void wasmcloud_couchbase_document_document_upsert_options_free(wasmcloud_couchbase_document_document_upsert_options_t *ptr);

void hello_list_string_free(hello_list_string_t *ptr);

void hello_option_list_string_free(hello_option_list_string_t *ptr);

void wasmcloud_couchbase_document_option_replica_read_level_free(wasmcloud_couchbase_document_option_replica_read_level_t *ptr);

void wasmcloud_couchbase_document_document_get_options_free(wasmcloud_couchbase_document_document_get_options_t *ptr);

void wasmcloud_couchbase_document_document_get_any_replica_options_free(wasmcloud_couchbase_document_document_get_any_replica_options_t *ptr);

void wasmcloud_couchbase_document_document_get_all_replica_options_free(wasmcloud_couchbase_document_document_get_all_replica_options_t *ptr);

void wasmcloud_couchbase_document_option_time_free(wasmcloud_couchbase_document_option_time_t *ptr);

void wasmcloud_couchbase_document_document_get_result_free(wasmcloud_couchbase_document_document_get_result_t *ptr);

void wasmcloud_couchbase_document_document_get_replica_result_free(wasmcloud_couchbase_document_document_get_replica_result_t *ptr);

void wasmcloud_couchbase_document_document_remove_options_free(wasmcloud_couchbase_document_document_remove_options_t *ptr);

void wasmcloud_couchbase_document_document_get_and_lock_options_free(wasmcloud_couchbase_document_document_get_and_lock_options_t *ptr);

void wasmcloud_couchbase_document_document_unlock_options_free(wasmcloud_couchbase_document_document_unlock_options_t *ptr);

void wasmcloud_couchbase_document_document_touch_options_free(wasmcloud_couchbase_document_document_touch_options_t *ptr);

void wasmcloud_couchbase_document_document_get_and_touch_options_free(wasmcloud_couchbase_document_document_get_and_touch_options_t *ptr);

void wasmcloud_couchbase_document_option_document_insert_options_free(wasmcloud_couchbase_document_option_document_insert_options_t *ptr);

void wasmcloud_couchbase_document_result_mutation_metadata_document_error_free(wasmcloud_couchbase_document_result_mutation_metadata_document_error_t *ptr);

void wasmcloud_couchbase_document_option_document_replace_options_free(wasmcloud_couchbase_document_option_document_replace_options_t *ptr);

void wasmcloud_couchbase_document_option_document_upsert_options_free(wasmcloud_couchbase_document_option_document_upsert_options_t *ptr);

void wasmcloud_couchbase_document_option_document_get_options_free(wasmcloud_couchbase_document_option_document_get_options_t *ptr);

void wasmcloud_couchbase_document_result_document_get_result_document_error_free(wasmcloud_couchbase_document_result_document_get_result_document_error_t *ptr);

void wasmcloud_couchbase_document_option_document_get_any_replica_options_free(wasmcloud_couchbase_document_option_document_get_any_replica_options_t *ptr);

void wasmcloud_couchbase_document_result_document_get_replica_result_document_error_free(wasmcloud_couchbase_document_result_document_get_replica_result_document_error_t *ptr);

void wasmcloud_couchbase_document_option_document_get_all_replica_options_free(wasmcloud_couchbase_document_option_document_get_all_replica_options_t *ptr);

void wasmcloud_couchbase_document_list_document_get_replica_result_free(wasmcloud_couchbase_document_list_document_get_replica_result_t *ptr);

void wasmcloud_couchbase_document_result_list_document_get_replica_result_document_error_free(wasmcloud_couchbase_document_result_list_document_get_replica_result_document_error_t *ptr);

void wasmcloud_couchbase_document_option_document_remove_options_free(wasmcloud_couchbase_document_option_document_remove_options_t *ptr);

void wasmcloud_couchbase_document_option_document_get_and_lock_options_free(wasmcloud_couchbase_document_option_document_get_and_lock_options_t *ptr);

void wasmcloud_couchbase_document_option_document_unlock_options_free(wasmcloud_couchbase_document_option_document_unlock_options_t *ptr);

void wasmcloud_couchbase_document_result_void_document_error_free(wasmcloud_couchbase_document_result_void_document_error_t *ptr);

void wasmcloud_couchbase_document_option_document_touch_options_free(wasmcloud_couchbase_document_option_document_touch_options_t *ptr);

void wasmcloud_couchbase_document_option_document_get_and_touch_options_free(wasmcloud_couchbase_document_option_document_get_and_touch_options_t *ptr);

extern void wasi_io_poll_pollable_drop_own(wasi_io_poll_own_pollable_t handle);

extern wasi_io_poll_borrow_pollable_t wasi_io_poll_borrow_pollable(wasi_io_poll_own_pollable_t handle);

void wasi_io_poll_list_borrow_pollable_free(wasi_io_poll_list_borrow_pollable_t *ptr);

void hello_list_u32_free(hello_list_u32_t *ptr);

extern void wasi_io_error_error_drop_own(wasi_io_error_own_error_t handle);

extern wasi_io_error_borrow_error_t wasi_io_error_borrow_error(wasi_io_error_own_error_t handle);

void wasi_io_streams_stream_error_free(wasi_io_streams_stream_error_t *ptr);

extern void wasi_io_streams_input_stream_drop_own(wasi_io_streams_own_input_stream_t handle);

extern wasi_io_streams_borrow_input_stream_t wasi_io_streams_borrow_input_stream(wasi_io_streams_own_input_stream_t handle);

extern void wasi_io_streams_output_stream_drop_own(wasi_io_streams_own_output_stream_t handle);

extern wasi_io_streams_borrow_output_stream_t wasi_io_streams_borrow_output_stream(wasi_io_streams_own_output_stream_t handle);

void hello_list_u8_free(hello_list_u8_t *ptr);

void wasi_io_streams_result_list_u8_stream_error_free(wasi_io_streams_result_list_u8_stream_error_t *ptr);

void wasi_io_streams_result_u64_stream_error_free(wasi_io_streams_result_u64_stream_error_t *ptr);

void wasi_io_streams_result_void_stream_error_free(wasi_io_streams_result_void_stream_error_t *ptr);

void wasi_http_types_method_free(wasi_http_types_method_t *ptr);

void wasi_http_types_scheme_free(wasi_http_types_scheme_t *ptr);

void hello_option_u16_free(hello_option_u16_t *ptr);

void wasi_http_types_dns_error_payload_free(wasi_http_types_dns_error_payload_t *ptr);

void hello_option_u8_free(hello_option_u8_t *ptr);

void wasi_http_types_tls_alert_received_payload_free(wasi_http_types_tls_alert_received_payload_t *ptr);

void hello_option_u32_free(hello_option_u32_t *ptr);

void wasi_http_types_field_size_payload_free(wasi_http_types_field_size_payload_t *ptr);

void wasi_http_types_option_field_size_payload_free(wasi_http_types_option_field_size_payload_t *ptr);

void wasi_http_types_error_code_free(wasi_http_types_error_code_t *ptr);

void wasi_http_types_header_error_free(wasi_http_types_header_error_t *ptr);

void wasi_http_types_field_key_free(wasi_http_types_field_key_t *ptr);

void wasi_http_types_field_value_free(wasi_http_types_field_value_t *ptr);

extern void wasi_http_types_fields_drop_own(wasi_http_types_own_fields_t handle);

extern wasi_http_types_borrow_fields_t wasi_http_types_borrow_fields(wasi_http_types_own_fields_t handle);

extern void wasi_http_types_incoming_request_drop_own(wasi_http_types_own_incoming_request_t handle);

extern wasi_http_types_borrow_incoming_request_t wasi_http_types_borrow_incoming_request(wasi_http_types_own_incoming_request_t handle);

extern void wasi_http_types_outgoing_request_drop_own(wasi_http_types_own_outgoing_request_t handle);

extern wasi_http_types_borrow_outgoing_request_t wasi_http_types_borrow_outgoing_request(wasi_http_types_own_outgoing_request_t handle);

extern void wasi_http_types_request_options_drop_own(wasi_http_types_own_request_options_t handle);

extern wasi_http_types_borrow_request_options_t wasi_http_types_borrow_request_options(wasi_http_types_own_request_options_t handle);

extern void wasi_http_types_response_outparam_drop_own(wasi_http_types_own_response_outparam_t handle);

extern wasi_http_types_borrow_response_outparam_t wasi_http_types_borrow_response_outparam(wasi_http_types_own_response_outparam_t handle);

extern void wasi_http_types_incoming_response_drop_own(wasi_http_types_own_incoming_response_t handle);

extern wasi_http_types_borrow_incoming_response_t wasi_http_types_borrow_incoming_response(wasi_http_types_own_incoming_response_t handle);

extern void wasi_http_types_incoming_body_drop_own(wasi_http_types_own_incoming_body_t handle);

extern wasi_http_types_borrow_incoming_body_t wasi_http_types_borrow_incoming_body(wasi_http_types_own_incoming_body_t handle);

extern void wasi_http_types_future_trailers_drop_own(wasi_http_types_own_future_trailers_t handle);

extern wasi_http_types_borrow_future_trailers_t wasi_http_types_borrow_future_trailers(wasi_http_types_own_future_trailers_t handle);

extern void wasi_http_types_outgoing_response_drop_own(wasi_http_types_own_outgoing_response_t handle);

extern wasi_http_types_borrow_outgoing_response_t wasi_http_types_borrow_outgoing_response(wasi_http_types_own_outgoing_response_t handle);

extern void wasi_http_types_outgoing_body_drop_own(wasi_http_types_own_outgoing_body_t handle);

extern wasi_http_types_borrow_outgoing_body_t wasi_http_types_borrow_outgoing_body(wasi_http_types_own_outgoing_body_t handle);

extern void wasi_http_types_future_incoming_response_drop_own(wasi_http_types_own_future_incoming_response_t handle);

extern wasi_http_types_borrow_future_incoming_response_t wasi_http_types_borrow_future_incoming_response(wasi_http_types_own_future_incoming_response_t handle);

void wasi_http_types_option_error_code_free(wasi_http_types_option_error_code_t *ptr);

void hello_tuple2_field_key_field_value_free(hello_tuple2_field_key_field_value_t *ptr);

void hello_list_tuple2_field_key_field_value_free(hello_list_tuple2_field_key_field_value_t *ptr);

void wasi_http_types_result_own_fields_header_error_free(wasi_http_types_result_own_fields_header_error_t *ptr);

void hello_list_field_value_free(hello_list_field_value_t *ptr);

void wasi_http_types_result_void_header_error_free(wasi_http_types_result_void_header_error_t *ptr);

void wasi_http_types_option_scheme_free(wasi_http_types_option_scheme_t *ptr);

void wasi_http_types_result_own_incoming_body_void_free(wasi_http_types_result_own_incoming_body_void_t *ptr);

void wasi_http_types_result_own_outgoing_body_void_free(wasi_http_types_result_own_outgoing_body_void_t *ptr);

void wasi_http_types_result_void_void_free(wasi_http_types_result_void_void_t *ptr);

void hello_option_duration_free(hello_option_duration_t *ptr);

void wasi_http_types_result_own_outgoing_response_error_code_free(wasi_http_types_result_own_outgoing_response_error_code_t *ptr);

void wasi_http_types_result_own_input_stream_void_free(wasi_http_types_result_own_input_stream_void_t *ptr);

void wasi_http_types_option_own_trailers_free(wasi_http_types_option_own_trailers_t *ptr);

void wasi_http_types_result_option_own_trailers_error_code_free(wasi_http_types_result_option_own_trailers_error_code_t *ptr);

void wasi_http_types_result_result_option_own_trailers_error_code_void_free(wasi_http_types_result_result_option_own_trailers_error_code_void_t *ptr);

void wasi_http_types_option_result_result_option_own_trailers_error_code_void_free(wasi_http_types_option_result_result_option_own_trailers_error_code_void_t *ptr);

void wasi_http_types_result_own_output_stream_void_free(wasi_http_types_result_own_output_stream_void_t *ptr);

void wasi_http_types_result_void_error_code_free(wasi_http_types_result_void_error_code_t *ptr);

void wasi_http_types_result_own_incoming_response_error_code_free(wasi_http_types_result_own_incoming_response_error_code_t *ptr);

void wasi_http_types_result_result_own_incoming_response_error_code_void_free(wasi_http_types_result_result_own_incoming_response_error_code_void_t *ptr);

void wasi_http_types_option_result_result_own_incoming_response_error_code_void_free(wasi_http_types_option_result_result_own_incoming_response_error_code_void_t *ptr);

// Transfers ownership of `s` into the string `ret`
void hello_string_set(hello_string_t *ret, const char*s);

// Creates a copy of the input nul-terminate string `s` and
// stores it into the component model string `ret`.
void hello_string_dup(hello_string_t *ret, const char*s);

// Deallocates the string pointed to by `ret`, deallocating
// the memory behind the string.
void hello_string_free(hello_string_t *ret);

#ifdef __cplusplus
}
#endif
#endif
